apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: account-token-generator
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: account-token-generator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: account-token-generator
subjects:
- kind: ServiceAccount
  name: account-token-generator
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: account-token-generator
  apiGroup: rbac.authorization.k8s.io
---
{{- $jobValues := .Values.accountTokenGenerator.job -}}
{{- $containerValues := .Values.accountTokenGenerator.container -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: acc-token-gen-{{ $jobValues.version }}
  {{- with $jobValues.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- with $jobValues.extraSpec }}
  {{- . | toYaml | nindent 2 }}
  {{- end }}
  template:
    spec:
      automountServiceAccountToken: true
      serviceAccount: account-token-generator
      volumes:
      - name: tmp
        emptyDir: {}
      containers:
      - name: argocd
        image: "{{ $containerValues.image.repository }}:{{ $containerValues.image.tag }}" 
        imagePullPolicy: {{ $containerValues.image.pullPolicy }}
        securityContext: {{- toYaml $containerValues.securityContext | nindent 10 }}                      
        command: ["bash", "-c"]
        args:
        - |
          argocd --plaintext \
            --config /tmp/.config login argo-cd-argocd-server:80 \
            --username admin \
            --password ${ARGOCD_ADMIN_PASSWORD}

          {{ range .Values.accountTokenGenerator.accounts }}
          ARGOCD_TOKEN=$(argocd \
            --plaintext \
            --config /tmp/.config \
            --server argocd-server:80 \
            account \
            generate-token \
            --account {{ . }})

          kubectl create secret generic account-token-{{ . }} \
            --from-literal=account="{{ . }}" \
            --from-literal=authToken="$ARGOCD_TOKEN"
          {{ end }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        env:
        - name: ARGOCD_ADMIN_PASSWORD
          valueFrom:
           secretKeyRef:
             name: argocd-initial-admin-secret
             key: password
      initContainers:
      - name: wait-argocd
        image: busybox:1.31
        imagePullPolicy: IfNotPresent
        securityContext: {{- toYaml $containerValues.securityContext | nindent 10 }}
        command: ["sh", "-c"]
        args:
        - |
            echo -e "Checking for the availability of argo-cd-argocd-server"
            while ! nc -z argo-cd-argocd-server 80
                do sleep 1
                printf "-"
            done
            echo -e "  >> argocd server has started"        
      restartPolicy: Never    
                                    